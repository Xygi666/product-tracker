/**
 * –ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
 */
class SearchManager {
    constructor() {
        this.searchInput = null;
        this.searchResults = null;
        this.productSelect = null;
        this.isSearchMode = false;
        this.selectedProduct = null;
        this.searchTimeout = null;
        
        this.init();
    }

    init() {
        this.searchInput = document.getElementById('product-search');
        this.searchResults = document.getElementById('search-results');
        this.productSelect = document.getElementById('product-select');

        if (!this.searchInput || !this.searchResults || !this.productSelect) {
            console.warn('SearchManager: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
            return;
        }

        this.bindEvents();
        console.log('SearchManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    bindEvents() {
        // –ü–æ–∏—Å–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
        this.searchInput.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            this.handleSearch(query);
        });

        // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
        this.searchInput.addEventListener('focus', () => {
            const query = this.searchInput.value.trim();
            if (query) {
                this.showResults();
            } else {
                this.showAllProducts();
            }
        });

        // –°–∫—Ä—ã—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        this.searchInput.addEventListener('blur', (e) => {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            setTimeout(() => {
                this.hideResults();
            }, 200);
        });

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏—à–∞–º–∏
        this.searchInput.addEventListener('keydown', (e) => {
            this.handleKeyNavigation(e);
        });

        // –ö–ª–∏–∫ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
        document.addEventListener('click', (e) => {
            if (!this.searchInput.contains(e.target) && !this.searchResults.contains(e.target)) {
                this.hideResults();
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
     * @param {string} query –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
     */
    handleSearch(query) {
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        if (this.searchTimeout) {
            clearTimeout(this.searchTimeout);
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.searchTimeout = setTimeout(() => {
            if (query.length === 0) {
                this.showAllProducts();
            } else {
                this.performSearch(query);
            }
        }, 300);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     * @param {string} query –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
     */
    performSearch(query) {
        const products = Storage.searchProducts(query);
        
        if (products.length === 0) {
            this.showNoResults(query);
        } else {
            this.displayResults(products, query);
        }
        
        this.showResults();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
     */
    showAllProducts() {
        const products = Storage.getProducts();
        
        if (products.length === 0) {
            this.showEmptyState();
        } else {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            const favorites = products.filter(p => p.isFavorite);
            const regular = products.filter(p => !p.isFavorite);
            const sortedProducts = [...favorites, ...regular];
            
            this.displayResults(sortedProducts);
        }
        
        this.showResults();
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     * @param {Array} products –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     * @param {string} query –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
     */
    displayResults(products, query = '') {
        this.searchResults.innerHTML = '';
        
        products.forEach(product => {
            const resultItem = this.createResultItem(product, query);
            this.searchResults.appendChild(resultItem);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
     * @param {Object} product –ü—Ä–æ–¥—É–∫—Ç
     * @param {string} query –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
     * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    createResultItem(product, query = '') {
        const div = document.createElement('div');
        div.className = 'search-result-item';
        div.dataset.productId = product.id;
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        let productName = product.name;
        if (query) {
            const regex = new RegExp(`(${query})`, 'gi');
            productName = productName.replace(regex, '<mark>$1</mark>');
        }
        
        div.innerHTML = `
            <div class="search-result-info">
                <span class="search-result-name">${productName}</span>
                ${product.isFavorite ? '<span class="search-result-favorite">‚≠ê</span>' : ''}
            </div>
            <span class="search-result-price">${Utils.formatCurrency(product.price)}</span>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
        div.addEventListener('click', () => {
            this.selectProduct(product);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ hover –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
        div.addEventListener('mouseenter', () => {
            this.clearSelection();
            div.classList.add('selected');
        });
        
        return div;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     * @param {string} query –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
     */
    showNoResults(query) {
        this.searchResults.innerHTML = `
            <div class="search-no-results">
                <div class="search-no-results-icon">üîç</div>
                <div class="search-no-results-text">–ù–µ –Ω–∞–π–¥–µ–Ω–æ: "${query}"</div>
                <div class="search-no-results-hint">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å</div>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    showEmptyState() {
        this.searchResults.innerHTML = `
            <div class="search-empty-state">
                <div class="search-empty-icon">üì¶</div>
                <div class="search-empty-text">–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</div>
                <div class="search-empty-hint">–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</div>
            </div>
        `;
    }

    /**
     * –í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     * @param {Object} product –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
     */
    selectProduct(product) {
        this.selectedProduct = product;
        this.searchInput.value = product.name;
        this.hideResults();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π select –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        this.productSelect.innerHTML = `<option value="${product.id}" selected>${product.name}</option>`;
        this.productSelect.value = product.id;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã
        const selectedOption = this.productSelect.options[0];
        selectedOption.dataset.price = product.price;
        selectedOption.dataset.name = product.name;
        
        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É–º–º—ã
        this.productSelect.dispatchEvent(new Event('change'));
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        const quantityInput = document.getElementById('quantity-input');
        if (quantityInput) {
            quantityInput.focus();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
     * @param {KeyboardEvent} e –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    handleKeyNavigation(e) {
        const items = this.searchResults.querySelectorAll('.search-result-item');
        const currentSelected = this.searchResults.querySelector('.search-result-item.selected');
        
        switch (e.key) {
            case 'ArrowDown':
                e.preventDefault();
                if (!this.searchResults.classList.contains('show')) {
                    this.showResults();
                    return;
                }
                
                if (!currentSelected) {
                    if (items.length > 0) {
                        items[0].classList.add('selected');
                    }
                } else {
                    const nextIndex = Array.from(items).indexOf(currentSelected) + 1;
                    if (nextIndex < items.length) {
                        this.clearSelection();
                        items[nextIndex].classList.add('selected');
                    }
                }
                break;
                
            case 'ArrowUp':
                e.preventDefault();
                if (currentSelected) {
                    const prevIndex = Array.from(items).indexOf(currentSelected) - 1;
                    if (prevIndex >= 0) {
                        this.clearSelection();
                        items[prevIndex].classList.add('selected');
                    }
                }
                break;
                
            case 'Enter':
                e.preventDefault();
                if (currentSelected) {
                    const productId = parseInt(currentSelected.dataset.productId);
                    const product = Storage.getProductById(productId);
                    if (product) {
                        this.selectProduct(product);
                    }
                }
                break;
                
            case 'Escape':
                this.hideResults();
                this.searchInput.blur();
                break;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
     */
    clearSelection() {
        const selected = this.searchResults.querySelector('.search-result-item.selected');
        if (selected) {
            selected.classList.remove('selected');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     */
    showResults() {
        this.searchResults.classList.add('show');
    }

    /**
     * –°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     */
    hideResults() {
        this.searchResults.classList.remove('show');
        this.clearSelection();
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
     */
    refreshResults() {
        const query = this.searchInput.value.trim();
        if (query) {
            this.performSearch(query);
        } else if (this.searchResults.classList.contains('show')) {
            this.showAllProducts();
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫
     */
    clear() {
        this.searchInput.value = '';
        this.selectedProduct = null;
        this.hideResults();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
     * @returns {Object|null} –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
     */
    getSelectedProduct() {
        return this.selectedProduct;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
let searchManager;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    searchManager = new SearchManager();
});
