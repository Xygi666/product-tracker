class ExportManager {
  constructor() {
    this.init();
  }

  init() {
    console.log('ExportManager initialized');
  }

  exportToCSV() {
    try {
      const records = Storage.getCurrentMonthRecords();
      
      if (records.length === 0) {
        Utils.showToast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
        return null;
      }

      const headers = [
        '–î–∞—Ç–∞',
        '–í—Ä–µ–º—è',
        '–ü—Ä–æ–¥—É–∫—Ç',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        '–¶–µ–Ω–∞ –∑–∞ –µ–¥.',
        '–°—É–º–º–∞'
      ];

      const csvRows = [headers.join(',')];
      
      records.forEach(record => {
        const date = new Date(record.createdAt);
        const dateStr = date.toLocaleDateString('ru-RU');
        const timeStr = date.toLocaleTimeString('ru-RU', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        
        const row = [
          dateStr,
          timeStr,
          `"${record.productName}"`,
          record.quantity,
          record.price,
          record.amount
        ];
        
        csvRows.push(row.join(','));
      });

      const total = records.reduce((sum, r) => sum + r.amount, 0);
      csvRows.push('');
      csvRows.push(`"–ò—Ç–æ–≥–æ –∑–∞ –º–µ—Å—è—Ü:",,,,,${total}`);

      const csvContent = csvRows.join('\n');
      
      const fileName = `–æ—Ç—á–µ—Ç-–ø—Ä–æ–¥—É–∫—Ü–∏–∏-${new Date().toISOString().split('T')[0]}.csv`;
      this.downloadCSV(csvContent, fileName);
      
      Utils.showToast('CSV —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω', 'success');
      return csvContent;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:', error);
      Utils.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV', 'error');
      return null;
    }
  }

  exportToExcel() {
    try {
      const records = Storage.getCurrentMonthRecords();
      
      if (records.length === 0) {
        Utils.showToast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
        return;
      }

      let html = `
        <table border="1">
          <thead>
            <tr style="background-color: #f0f0f0; font-weight: bold;">
              <th>–î–∞—Ç–∞</th>
              <th>–í—Ä–µ–º—è</th>
              <th>–ü—Ä–æ–¥—É–∫—Ç</th>
              <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
              <th>–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
              <th>–°—É–º–º–∞</th>
            </tr>
          </thead>
          <tbody>
      `;

      records.forEach(record => {
        const date = new Date(record.createdAt);
        const dateStr = date.toLocaleDateString('ru-RU');
        const timeStr = date.toLocaleTimeString('ru-RU', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });

        html += `
          <tr>
            <td>${dateStr}</td>
            <td>${timeStr}</td>
            <td>${record.productName}</td>
            <td>${record.quantity}</td>
            <td>${record.price} ‚ÇΩ</td>
            <td style="font-weight: bold;">${record.amount} ‚ÇΩ</td>
          </tr>
        `;
      });

      const total = records.reduce((sum, r) => sum + r.amount, 0);
      html += `
        <tr style="background-color: #e0e0e0; font-weight: bold;">
          <td colspan="5">–ò—Ç–æ–≥–æ –∑–∞ –º–µ—Å—è—Ü:</td>
          <td>${total} ‚ÇΩ</td>
        </tr>
        </tbody>
        </table>
      `;

      const fileName = `–æ—Ç—á–µ—Ç-–ø—Ä–æ–¥—É–∫—Ü–∏–∏-${new Date().toISOString().split('T')[0]}.xls`;
      this.downloadExcel(html, fileName);
      
      Utils.showToast('Excel —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω', 'success');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel:', error);
      Utils.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel', 'error');
    }
  }

  createTextReport() {
    const records = Storage.getCurrentMonthRecords();
    const now = new Date();
    const monthName = now.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
    
    let report = `üì¶ –û–¢–ß–ï–¢ –ü–û –ü–†–û–î–£–ö–¶–ò–ò\n`;
    report += `üìÖ –ó–∞ ${monthName}\n`;
    report += `üïê –°–æ–∑–¥–∞–Ω: ${now.toLocaleString('ru-RU')}\n`;
    report += `\n`;

    if (records.length === 0) {
      report += `‚ùå –ó–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n`;
      return report;
    }

    const productSummary = {};
    records.forEach(record => {
      if (!productSummary[record.productName]) {
        productSummary[record.productName] = {
          quantity: 0,
          amount: 0,
          count: 0
        };
      }
      productSummary[record.productName].quantity += record.quantity;
      productSummary[record.productName].amount += record.amount;
      productSummary[record.productName].count += 1;
    });

    report += `üìä –°–í–û–î–ö–ê –ü–û –ü–†–û–î–£–ö–¢–ê–ú:\n`;
    Object.entries(productSummary).forEach(([name, data]) => {
      report += `‚Ä¢ ${name}: ${data.quantity} —à—Ç., ${Utils.formatCurrency(data.amount)}\n`;
    });

    const total = records.reduce((sum, r) => sum + r.amount, 0);
    report += `\nüí∞ –û–ë–©–ò–ô –î–û–•–û–î: ${Utils.formatCurrency(total)}\n`;
    report += `üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${records.length}\n`;
    report += `üèÜ –õ—É—á—à–∏–π –ø—Ä–æ–¥—É–∫—Ç: ${this.getBestProduct(productSummary)}\n`;

    return report;
  }

  getBestProduct(productSummary) {
    let bestProduct = '';
    let maxAmount = 0;
    
    Object.entries(productSummary).forEach(([name, data]) => {
      if (data.amount > maxAmount) {
        maxAmount = data.amount;
        bestProduct = name;
      }
    });
    
    return bestProduct || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
  }

  async sendToEmail() {
    try {
      const report = this.createTextReport();
      const subject = `–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ ${new Date().toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}`;
      
      if (navigator.share && navigator.canShare && navigator.canShare({ text: report })) {
        await navigator.share({
          title: subject,
          text: report
        });
        Utils.showToast('–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —à–µ—Ä', 'success');
      } else {
        await Utils.copyToClipboard(report);
        Utils.showToast('–û—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
        
        const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(report)}`;
        window.open(mailtoLink);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      Utils.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞', 'error');
    }
  }

  async shareReport() {
    try {
      const report = this.createTextReport();
      const subject = `–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ ${new Date().toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}`;
      
      if (navigator.share) {
        await navigator.share({
          title: subject,
          text: report
        });
        Utils.showToast('–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
      } else {
        await Utils.copyToClipboard(report);
        Utils.showToast('–û—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
      Utils.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞', 'error');
    }
  }

  downloadCSV(content, fileName) {
    const BOM = '\uFEFF';
    const blob = new Blob([BOM + content], { 
      type: 'text/csv;charset=utf-8;' 
    });
    
    Utils.downloadFile(blob, fileName, 'text/csv');
  }

  downloadExcel(htmlContent, fileName) {
    const blob = new Blob([htmlContent], { 
      type: 'application/vnd.ms-excel;charset=utf-8;' 
    });
    
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  exportBackup() {
    try {
      const data = Storage.exportData();
      const jsonString = JSON.stringify(data, null, 2);
      const fileName = `product-tracker-backup-${new Date().toISOString().split('T')[0]}.json`;
      
      Utils.downloadFile(jsonString, fileName, 'application/json');
      Utils.showToast('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞', 'success');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
      Utils.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', 'error');
    }
  }
}

function exportToCSV() {
  const exportManager = new ExportManager();
  exportManager.exportToCSV();
  if (window.app) {
    window.app.closeQuickExport();
  }
}

function exportToEmail() {
  const exportManager = new ExportManager();
  exportManager.sendToEmail();
  if (window.app) {
    window.app.closeQuickExport();
  }
}

function shareReport() {
  const exportManager = new ExportManager();
  exportManager.shareReport();
  if (window.app) {
    window.app.closeQuickExport();
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const exportManager = new ExportManager();
});
