/**
 * –ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤
 */
class ExportManager {
    constructor() {
        this.init();
    }

    init() {
        console.log('ExportManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç
     * @returns {string} CSV –¥–∞–Ω–Ω—ã–µ
     */
    exportToCSV() {
        try {
            const records = Storage.getCurrentMonthRecords();
            const products = Storage.getProducts();
            
            if (records.length === 0) {
                Utils.showToast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
                return null;
            }

            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
            const headers = [
                '–î–∞—Ç–∞',
                '–í—Ä–µ–º—è',
                '–ü—Ä–æ–¥—É–∫—Ç',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                '–¶–µ–Ω–∞ –∑–∞ –µ–¥.',
                '–°—É–º–º–∞'
            ];

            // –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–µ–π
            const csvRows = [headers.join(',')];
            
            records.forEach(record => {
                const date = new Date(record.createdAt);
                const dateStr = date.toLocaleDateString('ru-RU');
                const timeStr = date.toLocaleTimeString('ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
                
                const row = [
                    dateStr,
                    timeStr,
                    `"${record.productName}"`,
                    record.quantity,
                    record.price,
                    record.amount
                ];
                
                csvRows.push(row.join(','));
            });

            // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
            const total = records.reduce((sum, r) => sum + r.amount, 0);
            csvRows.push('');
            csvRows.push(`"–ò—Ç–æ–≥–æ –∑–∞ –º–µ—Å—è—Ü:",,,,,${total}`);

            const csvContent = csvRows.join('\n');
            
            // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            const fileName = `–æ—Ç—á–µ—Ç-–ø—Ä–æ–¥—É–∫—Ü–∏–∏-${new Date().toISOString().split('T')[0]}.csv`;
            this.downloadCSV(csvContent, fileName);
            
            Utils.showToast('CSV —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω', 'success');
            return csvContent;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:', error);
            Utils.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV', 'error');
            return null;
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Ñ–æ—Ä–º–∞—Ç (HTML —Ç–∞–±–ª–∏—Ü–∞)
     */
    exportToExcel() {
        try {
            const records = Storage.getCurrentMonthRecords();
            
            if (records.length === 0) {
                Utils.showToast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º HTML —Ç–∞–±–ª–∏—Ü—É –¥–ª—è Excel
            let html = `
                <table border="1">
                    <thead>
                        <tr style="background-color: #f0f0f0; font-weight: bold;">
                            <th>–î–∞—Ç–∞</th>
                            <th>–í—Ä–µ–º—è</th>
                            <th>–ü—Ä–æ–¥—É–∫—Ç</th>
                            <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                            <th>–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
                            <th>–°—É–º–º–∞</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            records.forEach(record => {
                const date = new Date(record.createdAt);
                const dateStr = date.toLocaleDateString('ru-RU');
                const timeStr = date.toLocaleTimeString('ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });

                html += `
                    <tr>
                        <td>${dateStr}</td>
                        <td>${timeStr}</td>
                        <td>${record.productName}</td>
                        <td>${record.quantity}</td>
                        <td>${record.price} ‚ÇΩ</td>
                        <td style="font-weight: bold;">${record.amount} ‚ÇΩ</td>
                    </tr>
                `;
            });

            const total = records.reduce((sum, r) => sum + r.amount, 0);
            html += `
                    <tr style="background-color: #e0e0e0; font-weight: bold;">
                        <td colspan="5">–ò—Ç–æ–≥–æ –∑–∞ –º–µ—Å—è—Ü:</td>
                        <td>${total} ‚ÇΩ</td>
                    </tr>
                </tbody>
                </table>
            `;

            // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–∫ Excel —Ñ–∞–π–ª
            const fileName = `–æ—Ç—á–µ—Ç-–ø—Ä–æ–¥—É–∫—Ü–∏–∏-${new Date().toISOString().split('T')[0]}.xls`;
            this.downloadExcel(html, fileName);
            
            Utils.showToast('Excel —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω', 'success');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel:', error);
            Utils.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel', 'error');
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @returns {string} –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
     */
    createTextReport() {
        const records = Storage.getCurrentMonthRecords();
        const now = new Date();
        const monthName = now.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
        
        let report = `üì¶ –û–¢–ß–ï–¢ –ü–û –ü–†–û–î–£–ö–¶–ò–ò\n`;
        report += `üìÖ –ó–∞ ${monthName}\n`;
        report += `üïê –°–æ–∑–¥–∞–Ω: ${now.toLocaleString('ru-RU')}\n`;
        report += `\n`;

        if (records.length === 0) {
            report += `‚ùå –ó–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n`;
            return report;
        }

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
        const productSummary = {};
        records.forEach(record => {
            if (!productSummary[record.productName]) {
                productSummary[record.productName] = {
                    quantity: 0,
                    amount: 0,
                    count: 0
                };
            }
            productSummary[record.productName].quantity += record.quantity;
            productSummary[record.productName].amount += record.amount;
            productSummary[record.productName].count += 1;
        });

        report += `üìä –°–í–û–î–ö–ê –ü–û –ü–†–û–î–£–ö–¢–ê–ú:\n`;
        Object.entries(productSummary).forEach(([name, data]) => {
            report += `‚Ä¢ ${name}: ${data.quantity} —à—Ç., ${Utils.formatCurrency(data.amount)}\n`;
        });

        const total = records.reduce((sum, r) => sum + r.amount, 0);
        report += `\nüí∞ –û–ë–©–ò–ô –î–û–•–û–î: ${Utils.formatCurrency(total)}\n`;
        report += `üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${records.length}\n`;
        report += `üèÜ –õ—É—á—à–∏–π –ø—Ä–æ–¥—É–∫—Ç: ${this.getBestProduct(productSummary)}\n`;

        return report;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –ø—Ä–∏–±—ã–ª–∏
     * @param {Object} productSummary –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
     * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ –ª—É—á—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    getBestProduct(productSummary) {
        let bestProduct = '';
        let maxAmount = 0;
        
        Object.entries(productSummary).forEach(([name, data]) => {
            if (data.amount > maxAmount) {
                maxAmount = data.amount;
                bestProduct = name;
            }
        });
        
        return bestProduct || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –Ω–∞ email (—á–µ—Ä–µ–∑ –≤–µ–±-—à–µ—Ä –∏–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ)
     */
    async sendToEmail() {
        try {
            const report = this.createTextReport();
            const subject = `–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ ${new Date().toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}`;
            
            if (navigator.share && navigator.canShare && navigator.canShare({ text: report })) {
                await navigator.share({
                    title: subject,
                    text: report
                });
                Utils.showToast('–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —à–µ—Ä', 'success');
            } else {
                // Fallback: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                await Utils.copyToClipboard(report);
                Utils.showToast('–û—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
                
                // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å email –∫–ª–∏–µ–Ω—Ç
                const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(report)}`;
                window.open(mailtoLink);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
            Utils.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞', 'error');
        }
    }

    /**
     * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Ç—á–µ—Ç–æ–º
     */
    async shareReport() {
        try {
            const report = this.createTextReport();
            const subject = `–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ ${new Date().toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}`;
            
            if (navigator.share) {
                await navigator.share({
                    title: subject,
                    text: report
                });
                Utils.showToast('–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
            } else {
                // Fallback: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                await Utils.copyToClipboard(report);
                Utils.showToast('–û—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
            Utils.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞', 'error');
        }
    }

    /**
     * –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª
     * @param {string} content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV
     * @param {string} fileName –ò–º—è —Ñ–∞–π–ª–∞
     */
    downloadCSV(content, fileName) {
        const BOM = '\uFEFF'; // BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        const blob = new Blob([BOM + content], { 
            type: 'text/csv;charset=utf-8;' 
        });
        
        Utils.downloadFile(blob, fileName, 'text/csv');
    }

    /**
     * –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª
     * @param {string} htmlContent HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
     * @param {string} fileName –ò–º—è —Ñ–∞–π–ª–∞
     */
    downloadExcel(htmlContent, fileName) {
        const blob = new Blob([htmlContent], { 
            type: 'application/vnd.ms-excel;charset=utf-8;' 
        });
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è)
     */
    exportBackup() {
        try {
            const data = Storage.exportData();
            const jsonString = JSON.stringify(data, null, 2);
            const fileName = `product-tracker-backup-${new Date().toISOString().split('T')[0]}.json`;
            
            Utils.downloadFile(jsonString, fileName, 'application/json');
            Utils.showToast('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞', 'success');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
            Utils.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', 'error');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
function exportToCSV() {
    const exportManager = new ExportManager();
    exportManager.exportToCSV();
    closeQuickExport();
}

function exportToEmail() {
    const exportManager = new ExportManager();
    exportManager.sendToEmail();
    closeQuickExport();
}

function shareReport() {
    const exportManager = new ExportManager();
    exportManager.shareReport();
    closeQuickExport();
}

function closeQuickExport() {
    const modal = document.getElementById('quick-export-modal');
    if (modal) {
        modal.classList.remove('show');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    const exportManager = new ExportManager();
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫ –∫–Ω–æ–ø–∫–µ –±—ã—Å—Ç—Ä–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
    const quickExportBtn = document.getElementById('quick-export-btn');
    if (quickExportBtn) {
        quickExportBtn.addEventListener('click', () => {
            const modal = document.getElementById('quick-export-modal');
            if (modal) {
                modal.classList.add('show');
            }
        });
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫ –∫–Ω–æ–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π
    const exportCsvBtn = document.getElementById('export-csv-btn');
    if (exportCsvBtn) {
        exportCsvBtn.addEventListener('click', () => {
            exportManager.exportToCSV();
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    const modal = document.getElementById('quick-export-modal');
    if (modal) {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeQuickExport();
            }
        });
    }
});
